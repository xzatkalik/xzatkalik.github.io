<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><link type="text/css" rel="stylesheet" href="style1.css" media="screen" /><title>Tiny PXE Server</title></head><body><font> 
 
 
 
<p> 
<select ONCHANGE="location = this.options[this.selectedIndex].value;"> 
<option value="" disabled></option> 
<option value="../index.html">Contents</option> 
<option value="" disabled>=======</option> 
<option value="pxesrv_about.htm">Introduction</option> 
<option value="pxesrv_settings.htm">Settings</option> 
<option value="pxesrv_gui.htm">GUI Settings</option> 
<option value="pxesrv_config.htm">Config.ini settings</option> 
<option value="pxesrv_service.htm">Run as Service</option> 
<option value="firewall.htm">Firewall Settings</option> 
<option value="test_system.htm">Test System(s)</option> 
<option value="misc.htm">Miscellaneous</option> 
<option value="troubleshooting.htm">Troubleshooting</option> 
<option value="" disabled></option> 
<option value="" disabled>Boot Loaders</option> 
<option value="" disabled>==========</option> 
<option value="pxelinux.htm">PXELINUX</option> 
<option value="grub4dos.htm">Grub4Dos</option> 
<option value="ipxe.htm">iPXE</option> 
<option value="" disabled></option> 
<option value="" disabled>Boot</option> 
<option value="" disabled>====</option> 
<option value="fdd.htm">Floppy Disk Image</option> 
<option value="iso.htm" selected="selected">ISO Images</option> 
<option value="" disabled></option> 
<option value="" disabled>Linux</option> 
<option value="" disabled>=====</option> 
<option value="centos_netinstall.htm">CentOS - Network...</option> 
<option value="debian_netinstall.htm">Debian - Network...</option> 
<option value="fatdog.htm">FatDog</option> 
<option value="gparted.htm">GPartEd</option> 
<option value="ubuntu.htm">ubuntu/Lubuntu</option> 
<option value="ubuntu_netinstall.htm">ubuntu - Network...</option> 
<option value="" disabled></option> 
<option value="" disabled>WinPE</option> 
<option value="" disabled>=====</option> 
<option value="winpe.htm">WinPE</option> 
<option value="winpe_wimboot.htm">WinPE (wimboot)</option> 
<option value="winpe_bcd.htm">Multiple WinPE</option> 
<option value="" disabled></option> 
<option value="" disabled>Net Install Windows</option> 
<option value="" disabled>===============</option> 
<option value="ris.htm">RIS</option> 
<option value="ris_issues.htm">Troubleshooting RIS</option> 
<option value="win6x.htm">Install Windows NT 6.*</option> 
<option value="win5x.htm">Install Windows NT 5.*</option> 
<option value="" disabled></option> 
<option value="" disabled>SANBOOT (AoE)</option> 
<option value="" disabled>================</option> 
<option value="aoe_target.htm">AoE (Windows T...</option> 
<option value="aoe_install_winnt5.htm">AoE (Install Driver...</option> 
<option value="aoe_install_winnt6.htm">AoE (Install Driver...</option> 
<option value="aoe.htm">AoE (Clone...</option> 
<option value="" disabled></option> 
<option value="" disabled>SANBOOT (iSCSI)</option> 
<option value="" disabled>================</option> 
<option value="iscsi_targets.htm">iSCSI (Windows T...</option> 
<option value="iscsi_kernsafe.htm">iSCSI (Kernsafe...</option> 
<option value="iscsi_ms.htm">iSCSI (Microsoft...</option> 
<option value="iscsi_pytarget.htm">iSCSI (pyTarget)</option> 
<option value="iscsi.htm">iSCSI (Clone...</option> 
<option value="iscsi_install.htm">iSCSI (Install...</option> 
<option value="iscsi_centos.htm">iSCSI ...CentOS</option> 
<option value="iscsi_ubuntu.htm">iSCSI ...ubuntu</option> 
<option value="iscsi_ubuntu_netinstall.htm">iSCSI ...ubuntu (2)</option> 
<option value="" disabled></option> 
<option value="" disabled>Miscellaneous</option> 
<option value="" disabled>===========</option> 
<option value="clone.htm">Capture Windows...</option> 
<option value="clone_strarc.htm">Copy Windows...</option> 
<option value="service.htm">Network Adapter C...</option> 
<option value="wfplwf.htm">Unbinding The Light...</option> 
<option value="forensics.htm">Digital Forensic Acq...</option> 
<option value="ipxe_build.htm">iPXE - How to...</option> 
<option value="" disabled></option> 
<option value="" disabled>Appendices</option> 
<option value="" disabled>=========</option> 
<option value="pxesrv_zip.htm">Contents of pxesrv.zip</option> 
<option value="pxesrv_faq.htm">Erwan's FAQ</option> 
<option value="ack.htm">Acknowledgements...</option> 
<option value="" disabled></option> 
</select> 
</p> 
 
 
 
<hr> 
<img src="img/logo6.jpg" BORDER=1></a> 
 



<h2 align="center"><u>ISO Images</u></h2>



<p>
ISO images can be difficult to boot via PXE. On BIOS systems, files loaded into memory (e.g. via <font class="file">memdisk</font> or the <font class="file">Grub4dos</font> map command) are implemented using INT 13h BIOS interrupt calls - as a consequence any operating systems that use real mode disk access (e.g. DOS) will still be able to access the (memory) loaded ISO. Operating systems that run in protected mode (e.g. Windows NT, Linux, etc) will no longer be able to access the loaded ISO once the protected mode kernel is running. 
</p>


<p>
There are some exceptions to this - 

<div id="quote"><a class="glossary" target="_blank" href="http://www.syslinux.org/wiki/index.php/MEMDISK#ISO_images">"...The majority of Linux based CD images will also fail to work with MEMDISK ISO emulation. Linux distributions require kernel and initrd files to be specified, as soon as these files are loaded the protected mode kernel driver(s) take control and the virtual CD will no longer be accessible. If any other files are required from the CD/DVD they will be missing, resulting in boot error(s).<br /><br />Linux distributions that only require kernel and initrd files function fully via ISO emulation, as no other data needs accessing from the virtual CD/DVD drive once they have been loaded. The boot loader has read all necessary files to memory by using INT 13h, before booting the kernel..."</a></div>
</p>

<p>
FatDog ISO boot menu screenshot -
<br />
<IMG SRC="http://mistyrebootfiles.altervista.org/documents/TinyPXEServer/files/img\iso_fatdog2.jpg" BORDER=2>
</p>

 

<p>
RAM based Windows Preinstallation Environments (WinPE) can also be loaded from ISO files - the initial stages of the boot process run in real mode, loading the required files (<font class="file">*.wim</font> and <font class="file">*.sdi</font>) into RAM > control is then passed to the kernel running in protected mode - preserving the memory mapped files due to WinPE's built in ramdisk driver. At this stage the ISO mapped to RAM is lost, however no further files are required from it so the boot process can complete successfully. 
</p>


<p>
<font class="file">firadisk</font> and <font class="file">winvblk</font> are third party Windows RAM disk drivers capable of preserving mappings of files loaded into RAM via <font class="file">memdisk</font> and the <font class="file">Grub4dos</font> map command - if a Windows system contains these drivers then the ISO will still be accessible once the Operating System has loaded. If either of these drivers is correctly integrated into a Windows installation ISO file then it's possible to install Windows via a RAM loaded ISO file. 
</p>



<p>
Three different methods for booting ISO files are covered in this document -
<ul>
<li><b>memdisk</b> - loads the ISO file into memory prior to booting from it. Although it may no longer be possible to access the emulated disk (the iso mapped to memory) from the booted operating system if the kernel runs in protected mode, the RAM it occupies will remain in use - it's no longer available to the operating system. <font class="file">memdisk</font> can be used in conjunction with <font class="file">iPXE</font> to load an ISO file over HTTP - potentially loading the image much faster than when using TFTP.</li> 
</ul>

<ul>
<li><b>grub4dos map command</b> - operates in a similar manner to <font class="file">memdisk</font> (see above) - particularly in terms of RAM not being available to the booted operating system. </li>
</ul>

<ul>
<li><b>SANBOOT</b> - <font class="file">iPXE</font> contains built in support for SANBOOT. This allows the ISO file on the server to be accessed directly - it's not loaded into memory first. As a consequence SANBOOT has clear advantages on systems with low RAM.</li>
</ul>
</p>



<p>
Quick note on ISO booting - if using <font class="file">iPXE</font> then it's possible to boot ISO files from an external HTTP server - i.e. via the internet! There are two examples in the <a class="glossary" href="iso.htm#ipxe_scripts">iPXE Scripts</a> section of this page. 
</p>







<p>
The following examples demonstrate booting from ISO files via PXE. Copy the following ISO files to <font class="file">C:\pxesrv\files\iso\</font> - 
<ul>
<li><font class="file">WinPE.iso</font> (you will need to build your own WinPE as these files are non-redistributable)</li>
<li><font class="file">Fatdog64-701.iso</font> (from <a target="_blank" href="http://distro.ibiblio.org/fatdog/iso/Fatdog64-701.iso">here</a>)</li>
</ul>
</p>



<p>
Directory structure -
<ul>
<li><font class="file">C:\pxesrv\files\iso\WinPE.iso</font></li>
<li><font class="file">C:\pxesrv\files\iso\Fatdog64-701.iso</font></li>
</ul>
</p>



<p>
Now add a menu entry for your preferred Network Bootstrap Program -
<ul>
<li><a class="glossary" href="iso.htm#pxelinux">pxelinux menu settings</a></li>
<li><a class="glossary" href="iso.htm#grub4dos">grub4dos menu settings</a></li>
<li><a class="glossary" href="iso.htm#ipxe">iPXE menu settings</a></li>
<li><a class="glossary" href="iso.htm#ipxe_scripts">iPXE Scripts</a></li>
</ul>
</p>











<a name="pxelinux"></a>
<h3 class="breaktop"><u>pxelinux menu settings</u></h3>


<p>
Remember to ensure that the required files are copied to your <font class="file">Tiny PXE Server</font> root directory - 
<ul>
<li><font class="file">C:\pxesrv\files\pxelinux.0</font></li>
<li><font class="file">C:\pxesrv\files\memdisk</font></li> 
<li><font class="file">C:\pxesrv\files\menu.c32</font></li> 
<li><font class="file">C:\pxesrv\files\pxelinux.cfg\default</font></li>
</ul>
</p>



<p>
Add the following to <font class="file">C:\pxesrv\files\pxelinux.cfg\default</font> (create this file if required) -
<br />
<textarea style="font-size:12px" cols="80" rows="10" align="left" wrap="OFF" readonly>

LABEL fdog_iso1
MENU LABEL FatDog64 (Memdisk)
KERNEL memdisk
append iso initrd=iso/Fatdog64-701.iso

LABEL winpe_iso1
MENU LABEL WinPE (Memdisk)
KERNEL memdisk
append iso raw initrd=iso/WinPE.iso

</textarea>
</p>

<p>
Click on one of the following for sample <font class="file">config.ini</font> settings (edit to reflect your own setup) -
<ul>
<li><b>DHCP</b> - <a href="txt/config_dhcp_pxelinux1.txt">here</a></li>
<li><b>Proxy DHCP</b> - <a href="txt/config_proxydhcp_pxelinux1.txt">here</a></li>
</ul>
</p>







<a name="grub4dos"></a>
<h3 class="breaktop"><u>grub4dos menu settings</u></h3>


<p>
Remember to ensure that the required files are copied to your <font class="file">Tiny PXE Server</font> root directory - 
<ul>
<li><font class="file">C:\pxesrv\files\grldr</font></li>
<li><font class="file">C:\pxesrv\files\memdisk</font></li>
<li><font class="file">C:\pxesrv\files\menu.lst\default</font></li>
</ul>
</p>


<p>
Add the following to <font class="file">C:\pxesrv\files\menu.lst\default</font> (create this file if required) -
<br />
<textarea style="font-size:12px" cols="80" rows="10" align=left wrap=off readonly>

title FatDog64 (MAP)
map --mem (pd)/iso/Fatdog64-701.iso (0xFF)
map --hook
root (0xFF)
chainloader (0xFF)

title FatDog64 (Memdisk)
kernel memdisk
append iso initrd=iso/Fatdog64-701.iso

title WinPE (MAP)
map --mem (pd)/iso/WinPE.iso (0xFF)
map --hook
root (0xFF)
chainloader (0xFF)

title WinPE (Memdisk)
kernel memdisk
append iso raw initrd=iso/WinPE.iso

</textarea>
</p>




<p>
Click on one of the following for <font class="file">config.ini</font> settings (edit to reflect your own setup) -
<ul>
<li><b>DHCP</b> - <a href="txt/config_dhcp_grldr1.txt">here</a></li>
<li><b>Proxy DHCP</b> - <a href="txt/config_proxydhcp_grldr1.txt">here</a></li>
</ul>
</p>









<a name="ipxe"></a>
<h3 class="breaktop"><u>iPXE menu settings</u></h3>


<p>
Remember to ensure that the required files are copied to your <font class="file">Tiny PXE Server</font> root directory - 
<ul>
<li><font class="file">C:\pxesrv\files\ipxe.pxe</font> (or <font class="file">C:\pxesrv\files\ipxe-undionly.kpxe</font>)</li>
<li><font class="file">C:\pxesrv\files\ipxe_menu.txt</font></li> 
<li><font class="file">C:\pxesrv\files\memdisk</font></li> 
</ul>
</p>


<p>
Screenshot (detail) of <font class="file">Fatdog64-701.iso</font> being loaded into RAM using HTTP -
<br />
<IMG SRC="http://mistyrebootfiles.altervista.org/documents/TinyPXEServer/files/img\iso_fatdog1.jpg" BORDER=2>
</p>

  
<p>
Add the following to the menu section of <font class="file">C:\pxesrv\files\ipxe_menu.txt</font> (create this file if required) -
<br />
<textarea style="font-size:12px" cols="80" rows="5" align=left wrap=off readonly>

item fdog_iso1     FatDog64 (Memdisk)
item fdog_iso2     FatDog64 (SANBOOT)
item winpe_iso1    WinPE (Memdisk)
item winpe_iso2    WinPE (SANBOOT)
</textarea>
</p>



<p>
Add the following to the menu options section of <font class="file">C:\pxesrv\files\ipxe_menu.txt</font> -
<br />
<textarea style="font-size:12px" cols="80" rows="12" align=left wrap=off readonly>

:fdog_iso1
kernel ${boot-url}/memdisk iso raw
initrd ${boot-url}/iso/Fatdog64-701.iso
boot

:fdog_iso2
sanboot --no-describe ${boot-url}/iso/Fatdog64-701.iso
boot

:winpe_iso1
kernel ${boot-url}/memdisk iso raw
initrd ${boot-url}/iso/WinPE.iso
boot

:winpe_iso2
sanboot --no-describe ${boot-url}/iso/WinPE.iso
boot
</textarea>
</p>



<p>
E.g. - 
<br />
<textarea style="font-size:12px" cols="80" rows="10" align=left wrap=off readonly>

#!ipxe
#============== Set Variables ===============
set boot-url http://${dhcp-server}

#================ Main Menu =================
menu iPXE boot menu
item fdog_iso1     FatDog64 (Memdisk)
item fdog_iso2     FatDog64 (SANBOOT)
item winpe_iso1    WinPE (Memdisk)
item winpe_iso2    WinPE (SANBOOT)
choose target && goto ${target}

#============ Main Menu Options =============
:fdog_iso1
kernel ${boot-url}/memdisk iso raw
initrd ${boot-url}/iso/Fatdog64-701.iso
boot

:fdog_iso2
sanboot --no-describe ${boot-url}/iso/Fatdog64-701.iso
boot

:winpe_iso1
kernel ${boot-url}/memdisk iso raw
initrd ${boot-url}/iso/WinPE.iso
boot

:winpe_iso2
sanboot --no-describe ${boot-url}/iso/WinPE.iso
boot

</textarea>
<br />
<b>NOTE</b> - remember to change <font class="file">set boot-url http://${dhcp-server}</font> if using ProxyDHCP.
</p>






<p>
Click on one of the following for <font class="file">config.ini</font> settings (edit to reflect your own setup) -
<ul>
<li><b>DHCP</b> - <a href="txt/config_dhcp_ipxe1.txt">here</a></li>
<li><b>Proxy DHCP</b> - <a href="txt/config_proxydhcp_ipxe1.txt">here</a></li>
</ul>
</p>





<a name="ipxe_scripts"></a>
<h3 class="breaktop"><u>iPXE Scripts</u></h3>




<p>
<font class="file">iPXE</font> menus are essentially complicated scripts. It's also possible to specify a script using the <a class="glossary" href="pxesrv_config.htm#altfilename">altfilename</a> option in <font class="file">config.ini</font>. The two samples below can be used to boot ISO images over the internet. 
</p>



<p>
Boot FatDog64 (version 7.01) from a web server -
<textarea style="font-size:12px" cols="80" rows="10" align=left wrap=off readonly>

#!ipxe
set boot-url http://${dhcp-server}
kernel ${boot-url}/memdisk iso raw
initrd http://distro.ibiblio.org/fatdog/iso/Fatdog64-701.iso
boot
</textarea>
</p>



<p>
Boot Slitaz (version 4.0) from a web server -
<textarea style="font-size:12px" cols="80" rows="10" align=left wrap=off readonly>

#!ipxe
set boot-url http://${dhcp-server}
kernel ${boot-url}/memdisk iso raw
initrd http://mirror.slitaz.org/iso/4.0/slitaz-4.0.iso
boot
</textarea>
</p>





<p class="breakbottom">
</p>






<p class="breaktop"><font class="file">Document date - 28<sup>th</sup> February 2017(DRAFT)</font></p></font></body></html>