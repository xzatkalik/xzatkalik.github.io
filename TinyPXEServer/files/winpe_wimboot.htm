<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><link type="text/css" rel="stylesheet" href="style1.css" media="screen" /><title>Tiny PXE Server</title></head><body><font> 
 
 
 
<p> 
<select ONCHANGE="location = this.options[this.selectedIndex].value;"> 
<option value="" disabled></option> 
<option value="../index.html">Contents</option> 
<option value="" disabled>=======</option> 
<option value="pxesrv_about.htm">Introduction</option> 
<option value="pxesrv_settings.htm">Settings</option> 
<option value="pxesrv_gui.htm">GUI Settings</option> 
<option value="pxesrv_config.htm">Config.ini settings</option> 
<option value="pxesrv_service.htm">Run as Service</option> 
<option value="firewall.htm">Firewall Settings</option> 
<option value="test_system.htm">Test System(s)</option> 
<option value="misc.htm">Miscellaneous</option> 
<option value="troubleshooting.htm">Troubleshooting</option> 
<option value="" disabled></option> 
<option value="" disabled>Boot Loaders</option> 
<option value="" disabled>==========</option> 
<option value="pxelinux.htm">PXELINUX</option> 
<option value="grub4dos.htm">Grub4Dos</option> 
<option value="ipxe.htm">iPXE</option> 
<option value="" disabled></option> 
<option value="" disabled>Boot</option> 
<option value="" disabled>====</option> 
<option value="fdd.htm">Floppy Disk Image</option> 
<option value="iso.htm">ISO Image</option> 
<option value="" disabled></option> 
<option value="" disabled>Linux</option> 
<option value="" disabled>=====</option> 
<option value="centos_netinstall.htm">CentOS - Network...</option> 
<option value="debian_netinstall.htm">Debian - Network...</option> 
<option value="fatdog.htm">FatDog</option> 
<option value="gparted.htm">GPartEd</option> 
<option value="ubuntu.htm">ubuntu/Lubuntu</option> 
<option value="ubuntu_netinstall.htm">ubuntu - Network...</option> 
<option value="" disabled></option> 
<option value="" disabled>WinPE</option> 
<option value="" disabled>=====</option> 
<option value="winpe.htm">WinPE</option> 
<option value="winpe_wimboot.htm" selected="selected">WinPE (wimboot)</option> 
<option value="winpe_bcd.htm">Multiple WinPE</option> 
<option value="" disabled></option> 
<option value="" disabled>Net Install Windows</option> 
<option value="" disabled>===============</option> 
<option value="ris.htm">RIS</option> 
<option value="ris_issues.htm">Troubleshooting RIS</option> 
<option value="win6x.htm">Install Windows NT 6.*</option> 
<option value="win5x.htm">Install Windows NT 5.*</option> 
<option value="" disabled></option> 
<option value="" disabled>SANBOOT (AoE)</option> 
<option value="" disabled>================</option> 
<option value="aoe_target.htm">AoE (Windows T...</option> 
<option value="aoe_install_winnt5.htm">AoE (Install Driver...</option> 
<option value="aoe_install_winnt6.htm">AoE (Install Driver...</option> 
<option value="aoe.htm">AoE (Clone...</option> 
<option value="" disabled></option> 
<option value="" disabled>SANBOOT (iSCSI)</option> 
<option value="" disabled>================</option> 
<option value="iscsi_targets.htm">iSCSI (Windows T...</option> 
<option value="iscsi_kernsafe.htm">iSCSI (Kernsafe...</option> 
<option value="iscsi_ms.htm">iSCSI (Microsoft...</option> 
<option value="iscsi_pytarget.htm">iSCSI (pyTarget)</option> 
<option value="iscsi.htm">iSCSI (Clone...</option> 
<option value="iscsi_install.htm">iSCSI (Install...</option> 
<option value="iscsi_centos.htm">iSCSI ...CentOS</option> 
<option value="iscsi_ubuntu.htm">iSCSI ...ubuntu</option> 
<option value="iscsi_ubuntu_netinstall.htm">iSCSI ...ubuntu (2)</option> 
<option value="" disabled></option> 
<option value="" disabled>Miscellaneous</option> 
<option value="" disabled>===========</option> 
<option value="clone.htm">Capture Windows...</option> 
<option value="clone_strarc.htm">Copy Windows...</option> 
<option value="service.htm">Network Adapter C...</option> 
<option value="wfplwf.htm">Unbinding The Light...</option> 
<option value="forensics.htm">Digital Forensic Acq...</option> 
<option value="ipxe_build.htm">iPXE - How to...</option> 
<option value="" disabled></option> 
<option value="" disabled>Appendices</option> 
<option value="" disabled>=========</option> 
<option value="pxesrv_zip.htm">Contents of pxesrv.zip</option> 
<option value="pxesrv_faq.htm">Erwan's FAQ</option> 
<option value="ack.htm">Acknowledgements...</option> 
<option value="" disabled></option> 
</select> 
</p> 
 
 
 
<hr> 
<img src="img/logo6.jpg" BORDER=1></a> 
 



<h2 align="center"><u>WinPE (wimboot)</u></h2>

<p>
<font class="file">wimboot</font> version 2.5.2 was used in the tests carried out below and is included in the <font class="file">Tiny PXE Server</font> version 1.0.0.20 (dated 12/2/2017 (19:29)) download package. The most recent <font class="file">wimboot</font> version can be downloaded from <a target="_blank" href="http://git.ipxe.org/releases/wimboot/wimboot-latest.zip">here</a>. The <a class="glossary" target="_blank" href="http://ipxe.org/wimboot">wimboot</a> and <a class="glossary" target="_blank" href="http://ipxe.org/appnote/wimboot_architecture">wimboot_architecture</a> pages on the <a class="glossary" target="_blank" href="http://ipxe.org/">iPXE</a> site contain detailed information about usage.
</p>

<p>
All references to <font class="file">wimboot</font> in this page refer to the <font class="file">wimboot</font> module developed by Michael Brown - this is not to be confused with the <a class="glossary" target="_blank" href="https://technet.microsoft.com/en-us/library/dn594399.aspx">wimboot</a> feature introduced in Windows 8.1 (a method used to boot a full Windows OS from files within a compressed .wim image on a local drive). 
</p>

<p>
<font class="file">wimboot</font> features -
<div id="quote">
<i>
"...wimboot is a boot loader for Windows Imaging Format (.wim) files. It enables you to boot a Windows PE (WinPE) environment from a RAM disk, without wasting the memory used for the RAM disk image.<br /><br />

You can use wimboot with iPXE to boot Windows PE via HTTP. With a Gigabit Ethernet network, a typical 200MB WinPE image should download in less than two seconds....

wimboot allows you to use a single procedure and set of files to boot under both BIOS and UEFI environments..." 
</i>
</div>
</p>

<p>
Windows Preinstallation Environment (WinPE) and file dependencies required for PXE booting WinPE are covered in detail in the <a href="winpe.htm">WinPE</a> page of this document - please read the <i>WinPE</i> page first, prior to this page. 
</p>

<p>
Sections in this page include -
<ul>
<li><a class="glossary" href="winpe_wimboot.htm#commands">wimboot Commands/Syntax</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#required">Required Files</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#virtual_name">Virtual Names</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#paths">wimboot Virtual Filesystem and Paths</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#example1">iPXE Example Script (BIOS)</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#example2">iPXE Example Script (UEFI)</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#example3">iPXE Example Script (BIOS and UEFI)</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#error">Possible Problems and Error Messages</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#filenames">Using alternative .wim or BCD files</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#memory">wimboot Memory Usage</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#pxelinux">pxelinux settings</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#grub4dos">grub4dos settings</a></li>
<li><a class="glossary" href="winpe_wimboot.htm#ipxe">iPXE settings</a></li>
</ul>
</p>






<a name="commands"></a>
<h3 class="breaktop"><u>wimboot Commands/Syntax</u></h3>

<p>
The <font class="file">wimboot</font> page lists several commands that can be passed to <font class="file">wimboot</font> (e.g. using the <font class="file">iPXE</font> kernel command) -

<ul>
<li>
<b>pause</b> (e.g. <i>kernel wimboot pause</i>) - <a class="glossary" target="_blank" href="http://ipxe.org/wimboot">"...This will instruct wimboot to wait for a keypress before booting Windows, to give you a further opportunity to observe any messages that may be displayed.  ..."</a>. This command may be useful for troubleshooting.
</li>
</ul>


<ul>
<li>
<b>index=#</b> (e.g. <i>kernel wimboot index=2</i>) - <a class="glossary" target="_blank" href="http://ipxe.org/wimboot">"...A WIM file can contain multiple bootable images. You can use the index=&lt;N&gt; command-line option to select the image to be booted...."</a>.
</li>
</ul>


<ul>
<li>
<a name="rawbcd"></a>
<b>rawbcd</b> (e.g. <i>kernel wimboot rawbcd</i>) - <a class="glossary" target="_blank" href="http://ipxe.org/wimboot">"...wimboot will automatically patch standard BIOS-compatible boot configuration data (BCD) files to allow them to be used on UEFI systems, by changing all occurrences of the string ”.exe” to ”.efi”. You can disable this behaviour by using the rawbcd command-line option...."</a>
</li>
</ul>
</p>








<a name="required"></a>
<h3 class="breaktop"><u>Required Files</u></h3>

<p>
As a minimum, the following files are required for booting WinPE via <font class="file">wimboot</font> -
<ul>
<li><font class="file">wimboot</font> - the <font class="file">wimboot</font> executable.</li>
</ul>


<ul>
<li><font class="file">bootmgr.exe</font> - Windows Boot Manager. This file may be extracted by <font class="file">wimboot</font> on the fly (from <font class="file">*.wim</font> - see below). <u><b><font color="red">NOTE</font></b> - for use on <font class="file">Client</font> systems with BIOS Firmware, or on UEFI systems booting in CSM mode.</u></li>
</ul>


<ul>
<li><font class="file">bootx64.efi</font> - Windows Boot Manager. This file may be extracted by <font class="file">wimboot</font> on the fly (from <font class="file">*.wim</font> - see below). <u><b><font color="red">NOTE</font></b> - for use on <font class="file">Client</font> systems with UEFI Firmware.</u></li>
</ul>

<ul>
<li><font class="file">BCD</font> - Boot Configuration Data. A registry hive containing boot settings used to load the Windows NT6.* operating system - in this case WinPE.</li>
</ul>


<ul>
<li><font class="file">*.sdi</font> - System Deployment Image. This file (typically <font class="file">boot.sdi</font>) is used to create the RAMDISK and filesystem used to mount the files in <font class="file">*.wim</font>.</li>
</ul>


<ul>
<li><font class="file">*.wim</font> - Windows Image File (typically <font class="file">boot.wim</font> or <font class="file">winpe.wim</font> or <font class="file">winre.wim</font>). This is a compressed archive containing the WinPE Operating System files. </li>
</ul>
</p>


<p>
The following paths (relative to the HTTP root directory) are used in the instructions below -
<ul>
<li><font class="file">\wimboot</font></li>
<li><font class="file">\bootmgr.exe</font></li>
<li><font class="file">\bootx64.efi</font></li>
<li><font class="file">\Boot\BCD</font></li>
<li><font class="file">\Boot\boot.sdi</font></li>
<li><font class="file">\Boot\boot.wim</font></li>
</ul>
</p>

<p>
<u><b><font color="red">NOTE</font></b> - on 32-bit UEFI systems, references to the UEFI boot file <font class="file">bootx64.efi</font> will need to be replaced with <font class="file">\bootia32.efi</font></u>. 
</p>














<a name="virtual_name"></a>
<h3 class="breaktop"><u>Virtual Names</u></h3>

<p>
The required WinPE files are (down)loaded using either the <font class="file">imgfetch</font>, <font class="file">initrd</font> or <font class="file">module</font> commands. These files are mapped to a Virtual Filesystem using a Virtual Name - refer to the <a class="glossary" href="winpe_wimboot.htm#paths">wimboot Virtual Filesystem and Paths</a> section for more information about the Virtual Filesystem. The Virtual Name can be the same as the original filename, or a different name can be used - a Virtual Name must however be specified. There are limited scenarios in which a filename will need to be mapped using a different Virtual Name - this concept is covered in more detail in the <a class="glossary" href="winpe_wimboot.htm#filenames">Using alternative .wim or BCD files</a> section of this page. 
</p>

<p>
A typical example for loading a file on <font class="file">Clients</font> with BIOS Firmware uses the following syntax -
<ul>
<li><font class="file">initrd [path]&nbsp;&nbsp;&nbsp;[virtual_name]</font></li>
</ul>
</p>


<p>
The syntax for <font class="file">Clients</font> with UEFI Firmware is slightly different, either one of the examples below can be used -
<ul>
<li><font class="file">initrd --name [virtual_name]&nbsp;&nbsp;&nbsp;[path]</font></li>
<li><font class="file">initrd -n [virtual_name]&nbsp;&nbsp;&nbsp;[path]</font></li>
</ul>
</p>


<p>
Where on both BIOS and UEFI systems -
<ul>
<li><font class="file">path</font> - Filename (with path) to be loaded. For example, to load <font class="file">BOOTMGR.EXE</font> located at the root of the HTTP server with IP address <font class="file">192.168.1.1</font> - use <font class="file"> http://192.168.1.1/BOOTMGR.EXE</font>.</li>
</ul>

<ul>
<li><font class="file">virtual_name</font> - name that the file specified in the <font class="file">path</font> will be mapped as on the <font class="file">wimboot</font> Virtual Filesystem.</li>
</ul>
</p>


<p>
Putting these elements together, on <font class="file">Client</font> systems with BIOS Firmware the relevant line in the iPXE script could use one of the following to map the file <font class="file">BOOTMGR.EXE</font> using the virtual name <font class="file">bootmgr.exe</font> -
<ul>
<li><font class="file">initrd http://192.168.1.1/BOOTMGR.EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bootmgr.exe</font></li>
<li><font class="file">initrd http://${dhcp-server}/BOOTMGR.EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bootmgr.exe</font></li>
<li><font class="file">initrd http://${next-server}/BOOTMGR.EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bootmgr.exe</font></li>
</ul>
</p>


<p>
Putting these elements together, on <font class="file">Client</font> systems with UEFI Firmware the relevant line in the iPXE script could use one of the following to map the file <font class="file">BOOTX64.EFI</font> using the virtual name <font class="file">bootx64.efi</font> -
<ul>
<li><font class="file">initrd --name bootx64.efi&nbsp;&nbsp;&nbsp;http://192.168.1.1/BOOTX64.EFI</font></li>
<li><font class="file">initrd --name bootx64.efi&nbsp;&nbsp;&nbsp;http://${dhcp-server}/BOOTX64.EFI</font></li>
<li><font class="file">initrd --name bootx64.efi&nbsp;&nbsp;&nbsp;http://${next-server}/BOOTX64.EFI</font></li>
<li><font class="file">initrd -n bootx64.efi&nbsp;&nbsp;&nbsp;http://192.168.1.1/BOOTX64.EFI</font></li>
<li><font class="file">initrd -n bootx64.efi&nbsp;&nbsp;&nbsp;http://${dhcp-server}/BOOTX64.EFI</font></li>
<li><font class="file">initrd -n bootx64.efi&nbsp;&nbsp;&nbsp;http://${next-server}/BOOTX64.EFI</font></li>
</ul>
</p>

<p>
<u><b><font color="red">NOTE</font></b> - Filenames and Virtual Names are not case sensitive - UPPERCASE and lowercase names have been used for <font class="file">bootmgr.exe</font> and <font class="file">bootx64.efi</font> in the examples above to illustrate how <font class="file">wimboot</font> uses Virtual Names. </u>
</p>













<a name="paths"></a>
<h3 class="breaktop"><u>wimboot Virtual Filesystem and Paths</u></h3>


<p>
<font class="file">wimboot</font> maps any files (down)loaded using either the <font class="file">imgfetch</font>, <font class="file">initrd</font> or <font class="file">module</font> commands to a Virtual Filesystem. Any file loaded by <font class="file">wimboot</font> will be mapped to multiple locations on this <font class="file">wimboot</font> Virtual Filesystem. At the time of writing these locations include -
<ul>
<li><font class="file">\</font></li>
<li><font class="file">\Boot</font></li>
<li><font class="file">\Boot\Fonts</font></li>
<li><font class="file">\Boot\Resources</font></li>
<li><font class="file">\Sources</font></li>
<li><font class="file">\EFI</font></li>
<li><font class="file">\EFI\Boot</font></li>
<li><font class="file">\EFI\Microsoft</font></li>
<li><font class="file">\EFI\Microsoft\Boot</font></li>
</ul>
</p>


<p>
Taking the command <font class="file">initrd http://192.168.1.1/BOOTMGR.EXE bootmgr.exe</font> from the earlier example, the actual file <font class="file">BOOTMGR.EXE</font> will be mapped as the virtual file <font class="file">bootmgr.exe</font> in <u>ALL</u> of the following (virtual) paths -
<ul>
<li><font class="file">\</font><b>bootmgr.exe</b></li>
<li><font class="file">\Boot\</font><b>bootmgr.exe</b></li>
<li><font class="file">\Boot\Fonts\</font><b>bootmgr.exe</b></li>
<li><font class="file">\Boot\Resources\</font><b>bootmgr.exe</b></li>
<li><font class="file">\Sources\</font><b>bootmgr.exe</b></li>
<li><font class="file">\EFI\</font><b>bootmgr.exe</b></li>
<li><font class="file">\EFI\Boot\</font><b>bootmgr.exe</b></li>
<li><font class="file">\EFI\Microsoft\</font><b>bootmgr.exe</b></li>
<li><font class="file">\EFI\Microsoft\Boot\</font><b>bootmgr.exe</b></li>
</ul>
</p>






<a name="example1"></a>
<h3 class="breaktop"><u>iPXE Example Script (BIOS)</u></h3>

<p>
Sample iPXE script -
<br />
<a name="script1"></a>
<textarea style="font-size:12px" cols="90" rows="10" align=left readonly>
#!ipxe
kernel http://192.168.1.1/wimboot pause
initrd http://192.168.1.1/BOOTMGR.EXE      bootmgr.exe
initrd http://192.168.1.1/BOOT/BCD         bcd
initrd http://192.168.1.1/BOOT/BOOT.SDI    boot.sdi
initrd http://192.168.1.1/BOOT/BOOT.WIM    boot.wim
boot
</textarea>
</p>

<p>
Breaking down the commands listed in the sample script above - 

<ul>
<li>
<font class="file">kernel http://192.168.1.1/wimboot pause</font> - load <font class="file">wimboot</font> (from the root HTTP folder on the system with IP address <font class="file">192.168.1.1</font>) and run it with the <font class="file">pause</font> command. 
</i>.
</li>
</ul>


<ul>
<li>
<font class="file">initrd http://192.168.1.1/BOOTMGR.EXE   bootmgr.exe</font> - load <font class="file">BOOTMGR.EXE</font> (from the root HTTP folder on the system with IP address <font class="file">192.168.1.1</font>) and map it using the Virtual Name <font class="file">bootmgr.exe</font> on the <font class="file">wimboot</font> Virtual Filesystem.
</li>
</ul>


<ul>
<li>
<font class="file">initrd http://192.168.1.1/BOOT/BCD   bcd
</font> - load <font class="file">BCD</font> (from the HTTP server with IP address <font class="file">192.168.1.1</font>) and map it using the Virtual Name <font class="file">bcd</font> on the <font class="file">wimboot</font> Virtual Filesystem.
</li>
</ul>
</p>

<ul>
<li>
<font class="file">initrd http://192.168.1.1/BOOT/BOOT.SDI boot.sdi</font> - load <font class="file">BOOT.SDI</font> (from the HTTP server with IP address <font class="file">192.168.1.1</font>) and map it using the Virtual Name <font class="file">boot.sdi</font> on the <font class="file">wimboot</font> Virtual Filesystem.
</li>
</ul>
</p>


<ul>
<li>
<font class="file">initrd http://192.168.1.1/BOOT/BOOT.WIM boot.wim</font> - load <font class="file">BOOT.WIM</font> (from the HTTP server with IP address <font class="file">192.168.1.1</font>) and map it using the Virtual Name <font class="file">boot.wim</font> on the <font class="file">wimboot</font> Virtual Filesystem.
</li>
</ul>
</p>


























<a name="example2"></a>
<h3 class="breaktop"><u>iPXE Example Script (UEFI)</u></h3>

<p>
Sample iPXE script -
<br />
<a name="script1"></a>
<textarea style="font-size:12px" cols="90" rows="10" align=left readonly>
#!ipxe
kernel http://192.168.1.1/wimboot pause
initrd --name bootx64.efi   http://192.168.1.1/BOOTX64.EFI   
initrd --name bcd           http://192.168.1.1/BOOT/BCD
initrd --name boot.sdi      http://192.168.1.1/BOOT/BOOT.SDI
initrd --name boot.wim      http://192.168.1.1/BOOT/BOOT.WIM
boot
</textarea>
</p>


<p>
Breaking down the commands listed in the sample script above - 

<ul>
<li>
<font class="file">kernel http://192.168.1.1/wimboot pause</font> - load <font class="file">wimboot</font> (from the root HTTP folder on the system with IP address <font class="file">192.168.1.1</font>) and run it with the <font class="file">pause</font> command. 
</i>.
</li>
</ul>


<ul>
<li>
<font class="file">initrd --name bootx64.efi http://192.168.1.1/BOOTX64.EFI</font> - load <font class="file">BOOTX64.EFI</font> (from the root HTTP folder on the system with IP address <font class="file">192.168.1.1</font>) and map it using the Virtual Name <font class="file">bootx64.efi</font> on the <font class="file">wimboot</font> Virtual Filesystem.
</li>
</ul>


<ul>
<li>
<font class="file">initrd --name bcd http://192.168.1.1/BOOT/BCD</font> - load <font class="file">BCD</font> (from the HTTP server with IP address <font class="file">192.168.1.1</font>) and map it using the Virtual Name <font class="file">bcd</font> on the <font class="file">wimboot</font> Virtual Filesystem.
</li>
</ul>
</p>

<ul>
<li>
<font class="file">initrd --name boot.sdi http://192.168.1.1/BOOT/BOOT.SDI</font> - load <font class="file">BOOT.SDI</font> (from the HTTP server with IP address <font class="file">192.168.1.1</font>) and map it using the Virtual Name <font class="file">boot.sdi</font> on the <font class="file">wimboot</font> Virtual Filesystem.
</li>
</ul>
</p>


<ul>
<li>
<font class="file">initrd --name boot.wim http://192.168.1.1/BOOT/BOOT.WIM</font> - load <font class="file">BOOT.WIM</font> (from the HTTP server with IP address <font class="file">192.168.1.1</font>) and map it using the Virtual Name <font class="file">boot.wim</font> on the <font class="file">wimboot</font> Virtual Filesystem.
</li>
</ul>
</p>







<a name="example3"></a>
<h3 class="breaktop"><u>iPXE Example Script (BIOS and UEFI)</u></h3>

<p>
It is possible to use the same script on BIOS and UEFI systems by specifying the Virtual Name using the <font class="file">--name</font> (or <font class="file">-n</font>) switch before the PATH, and also after the PATH. Use the syntax -
<ul>
<li>
<font class="file">initrd --name [virtual_name]&nbsp;&nbsp;&nbsp;[path]&nbsp;&nbsp;&nbsp;[virtual_name]</font>
</li>
<li>
<font class="file">initrd -n [virtual_name]&nbsp;&nbsp;&nbsp;[path]&nbsp;&nbsp;&nbsp;[virtual_name]</font>
</li>
</ul>
E.g. -
<br />
<a name="script1"></a>
<textarea style="font-size:12px" cols="90" rows="11" align=left readonly>
#!ipxe
kernel http://192.168.1.1/wimboot pause
initrd -n bootmgr.exe   http://192.168.1.1/BOOTMGR.EXE     bootmgr.exe ||
initrd -n bootx64.efi   http://192.168.1.1/BOOTX64.EFI     bootx64.efi ||      
initrd -n bcd           http://192.168.1.1/BOOT/BCD        bcd
initrd -n boot.sdi      http://192.168.1.1/BOOT/BOOT.SDI   boot.sdi   
initrd -n boot.wim      http://192.168.1.1/BOOT/BOOT.WIM   boot.wim
boot
</textarea>
</p>


<p>
In the above example, the <font class="file">||</font> operator (following the 3rd and 4th lines) is specified to proceed to the next line if the command fails (e.g. if <font class="file">bootmgr.exe</font> or <font class="file">bootx64.efi</font> is missing). 
</p>


<p>
On UEFI systems, <font class="file">bootmgr.exe</font> will be loaded to the Virtual Filesystem, but will be ignored and <font class="file">bootx64.efi</font> will be loaded and booted.
</p>


<p>
On BIOS systems, <font class="file">bootx64.efi</font> will be loaded to the Virtual Filesystem, but will be ignored and <font class="file">bootmgr.exe</font> will be loaded and booted.
</p>


<p>
See <a class="glossary" href="winpe_wimboot.htm#ipxe_scripts2">here</a> for a sample script configured to load the correct boot file based on platform firmware.  
</p>













<a name="error"></a>
<h3 class="breaktop"><u>Possible Problems and Error Messages</u></h3>

<p>
The most likely problems, assuming that all of the required files were loaded successfully, are incorrect filename(s)/path(s) in either the Virtual Filestem and/or the <font class="file">BCD</font> (Boot Configuration Data) store.  
<ul>
<li><a class="glossary" href="winpe_wimboot.htm#error1">Error Message - "Info: The Boot Configuration Data for your PC is missing or contains errors."</a></li>
</ul>
<ul>
<li><a class="glossary" href="winpe_wimboot.htm#error2">Error Message - "Info: A required device isn't connected or can't be accessed."</a></li>
</ul>
</p>




<a name="error1"></a>
<h3 class="breaktop"><u>Error Message - "Info: The Boot Configuration Data for your PC is missing or contains errors."</u></h3>

<div>
The filename and path for the <font class="file">BCD</font> store is hardcoded in <font class="file">bootmgr.exe</font> and <font class="file">bootx64.efi</font>. If the BCD store was mapped with a Virtual Name (see <a class="glossary" href="winpe_wimboot.htm#virtual_name">here</a>) <u>other</u> than <font class="file">BCD</font> it will not be found. Error message screenshot -
<br >
<a href="img/wimboot2a.jpg"><IMG SRC="img/wimboot2a.jpg" float=left width=90% margin-right=1% margin-bottom=0.5em border=1></a>
</div>


<p>
<u><b>Fix</b></u> - map the <font class="file">BCD</font> store using the Virtual Name <font class="file">BCD</font>. The following example demonstrates how to map the <font class="file">BCD</font> store <font class="file">http://192.168.1.1/BCD2</font> using the Virtual Name <font class="file">BCD</font> -
<ul>
<li>
<font class="file">initrd --name BCD http://192.168.1.1/BCD2 BCD</font>
</li>
</ul>
</p>












<a name="error2"></a>
<h3 class="breaktop"><u>Error Message - "Info: A required device isn't connected or can't be accessed."</u></h3>


<p>
This error could be the result of a required file (<font class="file">*.sdi</font> or <font class="file">*.wim</font> - or both) not being found if the hardcoded path in the BCD store does not match one of the paths on the <font class="file">wimboot</font> Virtual Filesystem (see <a class="glossary" href="winpe_wimboot.htm#paths">here</a>). Taking a <font class="file">*.wim</font> file as an example, assuming the Filename for the <font class="file">*.wim</font> file is <font class="file">boot.wim</font>, the path to this file in your <font class="file">BCD</font> store <u>MUST</u> be one of the following -
<ul>
<li><font class="file">\</font><b>boot.wim</b></li>
<li><font class="file">\Boot\</font><b>boot.wim</b></li>
<li><font class="file">\Boot\Fonts\</font><b>boot.wim</b></li>
<li><font class="file">\Boot\Resources\</font><b>boot.wim</b></li>
<li><font class="file">\Sources\</font><b>boot.wim</b></li>
<li><font class="file">\EFI\</font><b>boot.wim</b></li>
<li><font class="file">\EFI\Boot\</font><b>boot.wim</b></li>
<li><font class="file">\EFI\Microsoft\</font><b>boot.wim</b></li>
<li><font class="file">\EFI\Microsoft\Boot\</font><b>boot.wim</b></li>
</ul>
</p>


<p>
To check the path(s) in your <font class="file">BCD</font> store (e.g. <font class="file">C:\pxesrv\files\boot\BCD</font>), use the following bcdedit command -
<ul>
<li>
<font class="file">bcdedit /store "C:\pxesrv\files\boot\BCD" /enum ALL</font>
</li>
</ul>
</p>


<p>
Output from running the above command on the <font class="file">BCD</font> store available <a href="bcd_files/_wimboot/BCD">here</a> -
<br />
<textarea style="font-size:12px" cols="90" rows="8" align="left" wrap="OFF" readonly>

Windows Boot Manager
--------------------
identifier              {bootmgr}
device                  boot
description             Boot Manager
displayorder            {947d969e-f6ee-11e6-8274-ec55f9effba0}
timeout                 20

Windows Boot Loader
-------------------
identifier              {947d969e-f6ee-11e6-8274-ec55f9effba0}
device                  ramdisk=[boot]\boot\boot.wim,{940fe9c2-f6ee-11e6-8274-ec55f9effba0}
path                    \windows\system32\winload.exe
description             WinPE (wimboot)
nointegritychecks       Yes
osdevice                ramdisk=[boot]\boot\boot.wim,{940fe9c2-f6ee-11e6-8274-ec55f9effba0}
systemroot              \Windows
detecthal               Yes
winpe                   Yes

Device options
--------------
identifier              {940fe9c2-f6ee-11e6-8274-ec55f9effba0}
ramdisksdidevice        boot
ramdisksdipath          \boot\boot.sdi

</textarea>
</p>


<p>
And the relevant section for the <font class="file">*.wim</font> file (note the path is specified in the <font class="file">device</font> and <font class="file">osdevice</font> lines as <font class="file">\boot\boot.wim</font>) -
<br />
<textarea style="font-size:12px" cols="90" rows="13" align="left" wrap="OFF" readonly>
Windows Boot Loader
-------------------
identifier              {947d969e-f6ee-11e6-8274-ec55f9effba0}
device                  ramdisk=[boot]\boot\boot.wim,{940fe9c2-f6ee-11e6-8274-ec55f9effba0}
path                    \windows\system32\winload.exe
description             WinPE (wimboot)
nointegritychecks       Yes
osdevice                ramdisk=[boot]\boot\boot.wim,{940fe9c2-f6ee-11e6-8274-ec55f9effba0}
systemroot              \Windows
detecthal               Yes
winpe                   Yes
</textarea>
</p>




<p>
The Virtual Names for all required files must also match the Filename specified in the <font class="file">BCD</font> store. If the <font class="file">BCD</font> store specifies the <font class="file">*.wim</font> file with path as <font class="file">\sources\boot.wim</font> then your <font class="file">*.wim</font> file must be loaded with the Virtual Name <font class="file">boot.wim</font>. If the <font class="file">BCD</font> store specifies the <font class="file">*.wim</font> file with path as <font class="file">sources\x86.wim</font> then your <font class="file">*.wim</font> file must be loaded with the Virtual Name <font class="file">x86.wim</font>. 
</p>


<div>
Error message screenshot -
<br >
<a href="img/wimboot2b.jpg"><IMG SRC="img/wimboot2b.jpg" float=left width=90% margin-right=1% margin-bottom=0.5em border=1></a>
</div>



<p>
<u><b>Fix</b></u> - map the <font class="file">*.wim</font> file using the Virtual Name <font class="file">boot.wim</font> and map the <font class="file">*.sdi</font> file using the Virtual Name <font class="file">boot.sdi</font> and use the BCD store available <a href="bcd_files/_wimboot/BCD">here</a>. The script used to create this <font class="file">BCD</font> store is available <a href="bcd_files/_wimboot/cmd.txt">here</a>. The paths match paths on the <font class="file">wimboot</font> Virtual Filesystem and should work on BIOS and UEFI <font class="file">Client</font> systems (edit <font class="file">IP_ADDRESS</font> and any <font class="file">PATHS</font> to reflect your own setup).
</p>


<p>
Example script -
<br />
<a name="script1"></a>
<textarea style="font-size:12px" cols="90" rows="11" align=left readonly>
#!ipxe
kernel http://IP_ADDRESS/wimboot pause
initrd -n bootmgr.exe   http://IP_ADDRESS/bootmgr.exe     bootmgr.exe ||
initrd -n bootx64.efi   http://IP_ADDRESS/bootx64.efi     bootx64.efi ||      
initrd -n BCD           http://IP_ADDRESS/BOOT/BCD        BCD        
initrd -n boot.sdi      http://IP_ADDRESS/PATH/my.sdi     boot.sdi   
initrd -n boot.wim      http://IP_ADDRESS/PATH/my.wim     boot.wim
boot
</textarea>
</p>










<a name="filenames"></a>
<h3 class="breaktop"><u>Using alternative .wim or BCD files</u></h3>



<p>
Remember that any files specified in the <b>initrd</b> lines of <font class="file">wimboot</font> scripts <u>must</u> specify a virtual name. Whilst the Virtual Name can be identical to the actual Filename, it can be different. 
</p>


<p>
This allows multiple versions of <font class="file">.wim</font> and <font class="file">.sdi</font> files to be booted without having to create different <font class="file">BCD</font> stores (or adding multiple entries to one <font class="file">BCD</font> store). The following script helps to demonstrate this (note that the <font class="file">BCD</font> store (<a href="bcd_files/_wimboot/BCD">here</a>) with contents...
<br />
<textarea style="font-size:12px" cols="90" rows="8" align="left" readonly>

Windows Boot Manager
--------------------
identifier         {bootmgr}
device             boot
description        Boot Manager
displayorder       {6376a0ba-f3d4-11e6-8264-ec55f9effba0}
timeout            20

Windows Boot Loader
-------------------
identifier         {6376a0ba-f3d4-11e6-8264-ec55f9effba0}
device             ramdisk=[boot]\boot\boot.wim,{63101aca-f3d4-11e6-8264-ec55f9effba0}
path               \windows\system32\winload.exe
description        WinPE (wimboot)
osdevice           ramdisk=[boot]\boot\boot.wim,{63101aca-f3d4-11e6-8264-ec55f9effba0}
systemroot         \Windows
detecthal          Yes
winpe              Yes

Device options
--------------
identifier         {63101aca-f3d4-11e6-8264-ec55f9effba0}
ramdisksdidevice   boot
ramdisksdipath     \boot\boot.sdi
</textarea>
<br />
...and entries for <font class="file">boot.wim</font> and <font class="file">boot.sdi</font> is used in the test below.  
</p>

<p>
<br />
<textarea style="font-size:12px" cols="90" rows="10" align=left readonly>
#!ipxe
kernel http://192.168.1.1/wimboot pause
initrd -n bootmgr.exe   http://192.168.1.1/BOOTMGR.EXE     bootmgr.exe ||
initrd -n bootx64.efi   http://192.168.1.1/BOOTX64.EFI     bootx64.efi ||      
initrd -n bcd           http://192.168.1.1/BOOT/BCD        bcd
initrd -n boot.sdi      http://192.168.1.1/BOOT/x86.sdi   boot.sdi   
initrd -n boot.wim      http://192.168.1.1/BOOT/x86.wim   boot.wim
boot

</textarea>
</p>

<div>
Screenshot from running the above script -
<br >
<a href="img/wimboot1.jpg"><IMG SRC="img/wimboot1.jpg" float=left width=90% margin-right=1% margin-bottom=0.5em border=1></a>
</div>

<p>
We can see from the above screenshot that <font class="file">x86.wim</font> (<font class="file">http://192.168.1.1/BOOT/x86.wim</font>) was loaded successfully - after control was passed to wimboot the file was found as <font class="file">boot.wim</font> (<font class="file">wimboot</font> output - <i>"...found WIM file boot.wim</i>").
</p>

<p>
The same method can be used to load different BCD stores - e.g. 
</br >
<textarea style="font-size:12px" cols="90" rows="2" align=left readonly>
initrd --name BCD http://192.168.1.1/BOOT/BCD_uefi    BCD
</textarea>
</p>













<a name="memory"></a>
<h3 class="breaktop"><u>wimboot Memory Usage</u></h3>



<p>
The <font class="file">wimboot</font> documentation states -
<div id="quote">
<i>
"...boot a Windows PE (WinPE) environment from a RAM disk, without wasting the memory used for the RAM disk image..." 
</i>
</div>
</p>



<p>
I'm not sure how accurate this statement is, as on the text system there were significant benefits in terms of RAM usage when using the native Windows PE network bootstrap program (<font class="file">pxeboot.n12</font> - see <a href="winpe.htm#files">here</a>) instead of <font class="file">wimboot</font>.
</p>



<p>
The screenshot below shows total memory available on the test system (VMWare Player with 1GB of RAM) when WinPE was loaded using <font class="file">pxeboot.n12</font> (<i>Total</i> RAM = 1022 MB) - 
<br />
<img src="img/memory_usage1.jpg" border=2>
</p>



<p>
The screenshot below shows total memory available on the test system (the same VMWare Player system with 1GB of RAM) when WinPE was loaded using <font class="file">wimboot</font> (<i>Total</i> RAM = 818 MB) -  
<br />
<img src="img/memory_usage2.jpg" border=2>
</p>


<p>
The difference in <i>Total</i> RAM between the two systems is 204 MB - with the <font class="file">wimboot</font> system having less RAM available. The difference in RAM is approximately the size of the <font class="file">boot.wim</font> file containing WinPE - this is similar to RAM usage with <font class="file">memdisk</font> - whilst it may no longer be possible to access the emulated disk (the wim mapped to memory) from the booted operating system if the kernel runs in protected mode, the RAM it occupies will remain in use - it's no longer available to the operating system.
</p>



















<a name="pxelinux"></a>
<h3 class="breaktop"><u>pxelinux settings</u></h3>

<p>
It is not possible to successfully boot WinPE via <font class="file">wimboot</font> from <font class="file">PXELINUX</font> version 4.06 - <font class="file">iPXE</font> must be chainloaded and then used to boot <font class="file">wimboot</font>. 
</p>

<p>
In addition to the WinPE files listed in the <a class="glossary" href="winpe_wimboot.htm#required">Required Files</a> section, ensure that the following files are copied to your <font class="file">Tiny PXE Server</font> root directory - 
<ul>
<li><font class="file">C:\pxesrv\files\pxelinux.0</font></li>
<li><font class="file">C:\pxesrv\files\menu.c32</font></li> 
<li><font class="file">C:\pxesrv\files\pxelinux.cfg\default</font></li>
<li><font class="file">C:\pxesrv\files\ipxe.lkrn</font> (iPXE Linux Kernel)</li>
<li><font class="file">C:\pxesrv\files\wimboot_lkrn.txt</font> (iPXE script - see below)</li>
</ul>
</p>


<p>
Add the following to <font class="file">C:\pxesrv\files\pxelinux.cfg\default</font> (create this file if required) -
<br />
<textarea style="font-size:12px" cols="90" rows="6" align="left" wrap="OFF" readonly>
LABEL wimboot1
MENU LABEL wimboot (iPXE)
KERNEL ipxe.lkrn
APPEND initrd=wimboot_lkrn.txt
</textarea>
</p>


<p>
Contents of <font class="file">C:\pxesrv\files\wimboot_lkrn.txt</font> (create this file if required) - 
<br />
<textarea style="font-size:12px" cols="90" rows="12" align="left" readonly>
#!ipxe
dhcp net0 && echo IP address: ${net0/ip} ; echo Subnet mask: ${net0/netmask}
set boot-url http://${dhcp-server}
kernel ${boot-url}/wimboot pause
initrd -n bootmgr.exe   ${boot-url}/BOOTMGR.EXE     bootmgr.exe ||
initrd -n bootx64.efi   ${boot-url}/BOOTX64.EFI     bootx64.efi ||      
initrd -n bcd           ${boot-url}/BOOT/BCD        bcd
initrd -n boot.sdi      ${boot-url}/BOOT/BOOT.SDI   boot.sdi   
initrd -n boot.wim      ${boot-url}/BOOT/BOOT.WIM   boot.wim
boot
</textarea>
<br />
<b>NOTE</b> - remember to change <font class="file">set boot-url http://${dhcp-server}</font> if using ProxyDHCP. Also note that as we are chainloading iPXE we need to run the <i>dhcp</i> command to configure the network interface before running the other commands. 
</p>


<p>
Some newer (than <font class="file">PXELINUX</font> 4.06) versions of <font class="file">PXELINUX</font> can run <font class="file">wimboot</font> directly without chainloading <font class="file">iPXE</font> - see 
<a targer="_blank" href="http://reboot.pro/topic/20166-wimboot-from-pxelinux-setup/">here</a> and <a targer="_blank" href="http://reboot.pro/topic/18837-solved-wimboot-from-pxelinux-default-menu/">here</a>. The following menu entry was tested using <font class="file">PXELINUX</font> version 6.03 -
<br />
<textarea style="font-size:12px" cols="90" rows="6" align="left" wrap="OFF" readonly>
LABEL wimboot2
MENU LABEL wimboot (pxelinux)
com32 linux.c32
append wimboot initrdfile=bootmgr.exe,boot/BCD,boot/boot.sdi,boot/boot.wim
</textarea>
<br />
Note that the <font class="file">linux.c32</font> module is required.
</p>


<p>
<font class="file">PXELINUX</font> version 6.03 also supports mapping files with different filenames (refer to the <a class="glossary" href="winpe_wimboot.htm#filenames">Using alternative .wim or BCD files</a> section). Syntax is <font class="file">initrdfile=PATH_FILE@MAP_AS</font> - to map <font class="file">boot\x86.wim</font> as <font class="file">boot.wim</font>, use <font class="file">initrdfile=boot\x86.wim@boot.wim</font>. E.g. - 
<br />
<textarea style="font-size:12px" cols="90" rows="6" align="left" wrap="OFF" readonly>
LABEL wimboot2
MENU LABEL wimboot (pxelinux)
com32 linux.c32
append wimboot initrdfile=bootmgr.exe@bootmgr.exe,boot/BCD@BCD,boot/boot.sdi@boot.sdi,boot/x86.wim@boot.wim
</textarea>
</p>


<p>
Click on one of the following for sample <font class="file">config.ini</font> settings (edit to reflect your own setup) -
<ul>
<li><b>DHCP</b> - <a href="txt/config_dhcp_pxelinux1.txt">here</a></li>
<li><b>Proxy DHCP</b> - <a href="txt/config_proxydhcp_pxelinux1.txt">here</a></li>
</ul>
</p>



































<a name="grub4dos"></a>
<h3 class="breaktop"><u>grub4dos settings</u></h3>


<p>
It is not possible to successfully boot WinPE via <font class="file">wimboot</font> from <font class="file">grub4dos</font> using the version included in the <font class="file">Tiny PXE Server</font> download - <font class="file">iPXE</font> must be chainloaded and then used to boot <font class="file">wimboot</font>. 
</p>



<p>
In addition to the WinPE files listed in the <a class="glossary" href="winpe_wimboot.htm#required">Required Files</a> section, ensure that the following files are copied to your <font class="file">Tiny PXE Server</font> root directory -
<ul>
<li><font class="file">C:\pxesrv\files\grldr</font></li>
<li><font class="file">C:\pxesrv\files\menu.lst\default</font></li>
<li><font class="file">C:\pxesrv\files\ipxe.lkrn</font> (iPXE Linux Kernel)</li>
<li><font class="file">C:\pxesrv\files\wimboot_lkrn.txt</font> (iPXE script - see below)</li>
</ul>
</p>


<p>
Add the following to <font class="file">C:\pxesrv\files\menu.lst\default</font> (create this file if required) -
<br />
<textarea style="font-size:12px" cols="90" rows="6" align=left wrap=off readonly>
title wimboot (iPXE)
pxe keep
kernel (pd)/ipxe.lkrn
initrd (pd)/wimboot_lkrn.txt
</textarea>
</p>


<p>
Contents of <font class="file">C:\pxesrv\files\wimboot_lkrn.txt</font> (create this file if required) - 
<br />
<textarea style="font-size:12px" cols="90" rows="12" align="left" readonly>
#!ipxe
dhcp net0 && echo IP address: ${net0/ip} ; echo Subnet mask: ${net0/netmask}
set boot-url http://${dhcp-server}
kernel ${boot-url}/wimboot pause
initrd -n bootmgr.exe   ${boot-url}/BOOTMGR.EXE     bootmgr.exe ||
initrd -n bootx64.efi   ${boot-url}/BOOTX64.EFI     bootx64.efi ||      
initrd -n bcd           ${boot-url}/BOOT/BCD        bcd
initrd -n boot.sdi      ${boot-url}/BOOT/BOOT.SDI   boot.sdi   
initrd -n boot.wim      ${boot-url}/BOOT/BOOT.WIM   boot.wim
boot
</textarea>
<br />
<b>NOTE</b> - remember to change <font class="file">set boot-url http://${dhcp-server}</font> if using ProxyDHCP. Also note that as we are chainloading iPXE we need to run the <i>dhcp</i> command to configure the network interface before running the other commands. 
</p>



<p>
Some newer versions of <font class="file">Grub4dos</font> are reported to run <font class="file">wimboot</font> directly without chainloading <font class="file">iPXE</font> - see 
<a targer="_blank" href="http://reboot.pro/topic/20159-grub4dos-wimboot-support/">here</a>. This feature was added in <font class="file">Grub4dos</font> version 0.4.5c-2014-11-10, however I have not had any success in my tests. Reported menu syntax - 
<br />
<textarea style="font-size:12px" cols="90" rows="5" align="left" wrap="OFF" readonly>
title wimboot (grldr)
kernel /wimboot
initrd @bcd=/boot/bcd @boot.sdi=/boot/boot.sdi @bootmgr.exe=/bootmgr.exe @boot.wim=/boot/boot.wim
</textarea>
</p>


<p>
Click on one of the following for <font class="file">config.ini</font> settings (edit to reflect your own setup) -
<ul>
<li><b>DHCP</b> - <a href="txt/config_dhcp_grldr1.txt">here</a></li>
<li><b>Proxy DHCP</b> - <a href="txt/config_proxydhcp_grldr1.txt">here</a></li>
</ul>
</p>













<a name="ipxe"></a>
<h3 class="breaktop"><u>iPXE settings</u></h3>



<p>
Remember to ensure that the required files are copied to your <font class="file">Tiny PXE Server</font> root directory - 
<ul>
<li><font class="file">C:\pxesrv\files\ipxe.pxe</font> (or <font class="file">C:\pxesrv\files\ipxe-undionly.kpxe</font>)</li>
<li><font class="file">C:\pxesrv\files\ipxe_menu.txt</font></li> 
</ul>
</p>


<p>
Add the following to the menu section of <font class="file">C:\pxesrv\files\ipxe_menu.txt</font> (create this file if required) -
<br />
<textarea style="font-size:12px" cols="90" rows="3" align=left readonly>
item wimboot1      wimboot
</textarea>
</p>



<p>
Add the following to the menu options section of <font class="file">C:\pxesrv\files\ipxe_menu.txt</font> -
<br />
<textarea style="font-size:12px" cols="90" rows="10" align=left wrap=off readonly>
:wimboot1
kernel ${boot-url}/wimboot pause
initrd -n bootmgr.exe   ${boot-url}/BOOTMGR.EXE     bootmgr.exe ||
initrd -n bootx64.efi   ${boot-url}/BOOTX64.EFI     bootx64.efi ||      
initrd -n bcd           ${boot-url}/BOOT/BCD        bcd
initrd -n boot.sdi      ${boot-url}/BOOT/BOOT.SDI   boot.sdi   
initrd -n boot.wim      ${boot-url}/BOOT/BOOT.WIM   boot.wim
boot
</textarea>
</p>



<p>
E.g. - 
<br />
<textarea style="font-size:12px" cols="90" rows="10" align=left wrap=off readonly>
#!ipxe
#============== Set Variables ===============
set boot-url http://${dhcp-server}

#================ Main Menu =================
menu iPXE boot menu
item wimboot1      wimboot
choose target && goto ${target}

#============ Main Menu Options =============
:wimboot1
kernel ${boot-url}/wimboot pause
initrd -n bootmgr.exe   ${boot-url}/BOOTMGR.EXE     bootmgr.exe ||
initrd -n bootx64.efi   ${boot-url}/BOOTX64.EFI     bootx64.efi ||      
initrd -n bcd           ${boot-url}/BOOT/BCD        bcd
initrd -n boot.sdi      ${boot-url}/BOOT/BOOT.SDI   boot.sdi   
initrd -n boot.wim      ${boot-url}/BOOT/BOOT.WIM   boot.wim
boot

</textarea>
<br />
<b>NOTE</b> - remember to change <font class="file">set boot-url http://${dhcp-server}</font> if using ProxyDHCP.
</p>




<p>
Click on one of the following for <font class="file">config.ini</font> settings (edit to reflect your own setup) -
<ul>
<li><b>DHCP</b> - <a href="txt/config_dhcp_ipxe1.txt">here</a></li>
<li><b>Proxy DHCP</b> - <a href="txt/config_proxydhcp_ipxe1.txt">here</a></li>
</ul>
</p>









<a name="ipxe_scripts"></a>
<h3 class="breaktop"><u>iPXE Scripts</u></h3>


<p>
As an alternative to a menu, use a script to automatically load <font class="file">wimboot</font>. Specify the script using the <a class="glossary" href="pxesrv_config.htm#altfilename">altfilename</a> option in <font class="file">config.ini</font>. <b>NOTE</b> - remember to change <font class="file">set boot-url http://${dhcp-server}</font> if using ProxyDHCP.
</p>


<p>
Sample <font class="file">iPXE</font> script - <br />
<textarea style="font-size:12px" cols="90" rows="11" align=left wrap=off readonly>
#!ipxe
set boot-url http://${dhcp-server}
kernel ${boot-url}/wimboot pause
initrd -n bootmgr.exe   ${boot-url}/BOOTMGR.EXE     bootmgr.exe ||
initrd -n bootx64.efi   ${boot-url}/BOOTX64.EFI     bootx64.efi ||      
initrd -n bcd           ${boot-url}/BOOT/BCD        bcd
initrd -n boot.sdi      ${boot-url}/BOOT/BOOT.SDI   boot.sdi   
initrd -n boot.wim      ${boot-url}/BOOT/BOOT.WIM   boot.wim
boot
</textarea>
</p>


<a name="ipxe_scripts2"></a>
<p>
Sample <font class="file">iPXE</font> script configured to load the correct boot file based on platform firmware - <br />
<textarea style="font-size:12px" cols="90" rows="11" align=left wrap=off readonly>
#!ipxe
set boot-url http://${dhcp-server}
kernel ${boot-url}/wimboot pause
iseq ${platform} pcbios && initrd -n bootmgr.exe  ${boot-url}/BOOTMGR.EXE  bootmgr.exe ||
iseq ${platform} efi    && initrd -n bootx64.efi  ${boot-url}/BOOTX64.EFI  bootx64.efi ||
initrd -n bcd           ${boot-url}/BOOT/BCD        bcd
initrd -n boot.sdi      ${boot-url}/BOOT/BOOT.SDI   boot.sdi   
initrd -n boot.wim      ${boot-url}/BOOT/BOOT.WIM   boot.wim
boot
</textarea>
</p>



<p class="breaktop"><font class="file">Document date - 28<sup>th</sup> February 2017(DRAFT)</font></p></font></body></html>
